!function(n){function e(e){for(var a,l,s=e[0],i=e[1],c=e[2],p=0,u=[];p<s.length;p++)l=s[p],r[l]&&u.push(r[l][0]),r[l]=0;for(a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a]);for(_&&_(e);u.length;)u.shift()();return o.push.apply(o,c||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],a=!0,s=1;s<t.length;s++){var i=t[s];0!==r[i]&&(a=!1)}a&&(o.splice(e--,1),n=l(l.s=t[0]))}return n}var a={},r={0:0},o=[];function l(e){if(a[e])return a[e].exports;var t=a[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,l),t.l=!0,t.exports}l.m=n,l.c=a,l.d=function(n,e,t){l.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},l.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},l.t=function(n,e){if(1&e&&(n=l(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(l.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var a in n)l.d(t,a,function(e){return n[e]}.bind(null,a));return t},l.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return l.d(e,"a",e),e},l.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},l.p="";var s=window.webpackJsonp=window.webpackJsonp||[],i=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var _=i;o.push([26,1]),t()}({26:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es6_array_for_each__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);\n/* harmony import */ var core_js_modules_es6_array_for_each__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_for_each__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_array_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);\n/* harmony import */ var core_js_modules_es6_array_map__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_map__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39);\n/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41);\n/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(55);\n/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_styles_index_scss__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\nvar loadGoogleMapsApi = __webpack_require__(56);\n\nloadGoogleMapsApi({\n  key: \'AIzaSyACc7KrutzJRAbkiTOAMuxM568LrJ8XOjE\',\n  // Your API key\n  libraries: [\'places\']\n}).then(function (googleMaps) {\n  //document.querySelector(\'.map\')\n  // document selectors\n  var selectors = {\n    map: document.getElementById(\'map\'),\n    autocomplete: document.getElementById(\'autocomplete\'),\n    moreBtn: document.getElementById(\'more\')\n  }; // map & autocomplete definition\n\n  var map;\n  var autocomplete;\n  var places;\n  var getNextPage = null;\n  var selectedPlaceType = null;\n  var placeMarker = null;\n  var placeFound = false;\n  var infos = []; // place type definition\n\n  var iconPath = \'/Interactive-Frontend-Development/public/SVG\'; // const iconPath = \'/public/SVG\';\n\n  var placeType = {\n    bars: {\n      types: [\'food\', \'restaurant\', \'bar\'],\n      icon: {\n        url: "".concat(iconPath, "/map-restaurant.svg"),\n        scaledSize: new googleMaps.Size(35, 35)\n      }\n    },\n    hotels: {\n      types: [\'lodging\'],\n      icon: {\n        url: "".concat(iconPath, "/map-hotels.svg"),\n        scaledSize: new googleMaps.Size(35, 35)\n      }\n    },\n    attr: {\n      types: [\'museum\', \'art_gallery\', \'aquarium\', \'stadium\'],\n      icon: {\n        url: "".concat(iconPath, "/map-attractions.svg"),\n        scaledSize: new googleMaps.Size(35, 35)\n      }\n    }\n  };\n  var markers = [];\n  var hostnameRegexp = new RegExp(\'^https?://.+?/\'); // load more results on click\n\n  $(\'#more\').click(function () {\n    selectors.moreBtn.disabled = true;\n    if (getNextPage) getNextPage();\n  }); // app navigation\n\n  $(\'.appNav button\').click(function () {\n    var _this = $(this);\n\n    var parentList = _this.parent().parent();\n\n    var parentLi = _this.parent();\n\n    var target = _this.attr(\'data-target\');\n\n    if (parentLi.hasClass(\'active\') || !(target in placeType)) {\n      return false;\n    }\n\n    selectedPlaceType = placeType[target].types;\n    placeMarker = placeType[target].icon;\n\n    if (placeFound) {\n      clearMarkers();\n      clearResults();\n      search();\n    }\n\n    parentList.find(\'li\').removeClass(\'active\');\n    parentLi.addClass(\'active\');\n  });\n\n  function initMap() {\n    var mapStyle = {\n      styles: [{\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#ebe3cd"\n        }]\n      }, {\n        "elementType": "labels.text.fill",\n        "stylers": [{\n          "color": "#523735"\n        }]\n      }, {\n        "elementType": "labels.text.stroke",\n        "stylers": [{\n          "color": "#f5f1e6"\n        }]\n      }, {\n        "featureType": "administrative",\n        "elementType": "geometry.stroke",\n        "stylers": [{\n          "color": "#c9b2a6"\n        }]\n      }, {\n        "featureType": "administrative.land_parcel",\n        "elementType": "geometry.stroke",\n        "stylers": [{\n          "color": "#dcd2be"\n        }]\n      }, {\n        "featureType": "administrative.land_parcel",\n        "elementType": "labels.text.fill",\n        "stylers": [{\n          "color": "#ae9e90"\n        }]\n      }, {\n        "featureType": "landscape.natural",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#dfd2ae"\n        }]\n      }, {\n        "featureType": "poi",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#dfd2ae"\n        }]\n      }, {\n        "featureType": "poi",\n        "elementType": "labels.text.fill",\n        "stylers": [{\n          "color": "#93817c"\n        }]\n      }, {\n        "featureType": "poi.park",\n        "elementType": "geometry.fill",\n        "stylers": [{\n          "color": "#a5b076"\n        }]\n      }, {\n        "featureType": "poi.park",\n        "elementType": "labels.text.fill",\n        "stylers": [{\n          "color": "#447530"\n        }]\n      }, {\n        "featureType": "road",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#f5f1e6"\n        }]\n      }, {\n        "featureType": "road.arterial",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#fdfcf8"\n        }]\n      }, {\n        "featureType": "road.highway",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#f8c967"\n        }]\n      }, {\n        "featureType": "road.highway",\n        "elementType": "geometry.stroke",\n        "stylers": [{\n          "color": "#e9bc62"\n        }]\n      }, {\n        "featureType": "road.highway.controlled_access",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#e98d58"\n        }]\n      }, {\n        "featureType": "road.highway.controlled_access",\n        "elementType": "geometry.stroke",\n        "stylers": [{\n          "color": "#db8555"\n        }]\n      }, {\n        "featureType": "road.local",\n        "elementType": "labels.text.fill",\n        "stylers": [{\n          "color": "#806b63"\n        }]\n      }, {\n        "featureType": "transit.line",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#dfd2ae"\n        }]\n      }, {\n        "featureType": "transit.line",\n        "elementType": "labels.text.fill",\n        "stylers": [{\n          "color": "#8f7d77"\n        }]\n      }, {\n        "featureType": "transit.line",\n        "elementType": "labels.text.stroke",\n        "stylers": [{\n          "color": "#ebe3cd"\n        }]\n      }, {\n        "featureType": "transit.station",\n        "elementType": "geometry",\n        "stylers": [{\n          "color": "#dfd2ae"\n        }]\n      }, {\n        "featureType": "water",\n        "elementType": "geometry.fill",\n        "stylers": [{\n          "color": "#b9d3c2"\n        }]\n      }, {\n        "featureType": "water",\n        "elementType": "labels.text.fill",\n        "stylers": [{\n          "color": "#92998d"\n        }]\n      }]\n    };\n    map = new googleMaps.Map(selectors.map, mapStyle, {\n      center: {\n        lat: 53.1976208,\n        lng: 16.6152481\n      },\n      mapTypeControl: false,\n      panControl: false,\n      zoomControl: false,\n      streetViewControl: false,\n      zoom: 5\n    });\n    autocomplete = new googleMaps.places.Autocomplete(selectors.autocomplete, {\n      types: [\'(cities)\']\n    });\n    places = new googleMaps.places.PlacesService(map);\n    autocomplete.addListener(\'place_changed\', onPlaceChanged);\n  }\n\n  var onPlaceChanged = function onPlaceChanged() {\n    var place = autocomplete.getPlace();\n\n    if (place.geometry) {\n      placeFound = true;\n      clearMarkers();\n      clearResults(); // set the map position\n\n      map.panTo(place.geometry.location);\n      map.setZoom(15); // $(\'#map\').css(\'opacity\', 1);\n\n      $(\'body\').addClass(\'showMap\');\n      search();\n    } else {\n      document.getElementById(\'autocomplete\').placeholder = \'Enter a city\';\n    }\n  };\n\n  var search = function search() {\n    // set default value if empty\n    if (!selectedPlaceType) {\n      selectedPlaceType = placeType[\'hotels\'].types;\n    }\n\n    if (!placeMarker) {\n      placeMarker = placeType[\'hotels\'].icon;\n    } // search configuration\n\n\n    var search = {\n      bounds: map.getBounds(),\n      types: selectedPlaceType\n    };\n    places.nearbySearch(search, function (results, status, pagination) {\n      if (status === googleMaps.places.PlacesServiceStatus.OK) {\n        var key = markers.length ? markers.length : 0;\n        var c = 0;\n        results.forEach(function (result) {\n          // add marker to the map\n          markers[key] = new googleMaps.Marker({\n            position: result.geometry.location,\n            animation: googleMaps.Animation.DROP,\n            icon: placeMarker\n          }); // call function to drop the marker\n\n          setTimeout(dropMarker(key), c * 100); // add result navigation\n\n          addResult(result, key); // add marker info\n\n          showInfoWindow(markers[key], key, result.place_id);\n          key += 1;\n          c += 1;\n        }); // add more results if any\n\n        selectors.moreBtn.disabled = !pagination.hasNextPage;\n\n        getNextPage = pagination.hasNextPage && function () {\n          pagination.nextPage();\n        };\n      } else {\n        $(\'#resultsNav\').append("<div class=\\"noResult error-message\\">No results found</div>");\n      }\n    });\n  }; // build result navigation\n\n\n  var addResult = function addResult(result, key) {\n    // create result as clickable button\n    var button = document.createElement(\'div\');\n    button.classList.add(\'result\'); // add clickable event\n\n    button.onclick = function () {\n      googleMaps.event.trigger(markers[key], \'click\');\n    }; // create button content\n\n\n    var btnContent;\n    btnContent = "<div class=\\"ico\\">\\n                         <img src=\\"".concat(result.icon, "\\" />\\n                        </div>");\n    btnContent += "<div class=\\"resultContent\\">";\n    btnContent += "<h6 class=\\"resultName\\">".concat(result.name, "</h6>");\n\n    if (placeRating(result.rating)) {\n      btnContent += "<div class=\\"rating\\">";\n      btnContent += "Rating ".concat(placeRating(result.rating));\n      btnContent += "</div>";\n    }\n\n    btnContent += "</div>";\n    button.innerHTML = btnContent;\n    $(\'#resultsNav\').append(button);\n  };\n\n  var placeRating = function placeRating(rating) {\n    if (!rating) return false;\n    var out = \'\';\n\n    for (var i = 0; i < 5; i++) {\n      out += rating < i + 0.5 ? \'&#10025;\' : \'&#10029;\';\n    }\n\n    return out;\n  }; // Get the place details. Show the information in an info window,\n\n\n  var showInfoWindow = function showInfoWindow(marker, key, placeID) {\n    // const marker = this;\n    var windowInfo = new googleMaps.InfoWindow({\n      maxWidth: 250\n    });\n    googleMaps.event.addListener(marker, \'click\', function () {\n      places.getDetails({\n        placeId: placeID\n      }, function (place, status) {\n        if (status !== googleMaps.places.PlacesServiceStatus.OK) {\n          return false;\n        }\n\n        closeInfoWindow();\n        highlightNavigation(key);\n        infos[0] = windowInfo;\n        windowInfo.setContent(buildInfoContent(place));\n        windowInfo.open(marker.getMap(), marker);\n      });\n    });\n  };\n\n  var highlightNavigation = function highlightNavigation(key) {\n    var navItems = $(\'#resultsNav\').find(\'.result\'); // check is empty\n\n    if (!navItems.length) return false;\n    navItems.removeClass(\'active\');\n    navItems.each(function (i) {\n      if (i === key) {\n        var _this = $(this);\n\n        var scrollContainer = $(\'#resultsNav\').parent();\n\n        _this.addClass(\'active\'); // calculate top position\n\n\n        var topPos = _this.position().top; // apply the scroll\n\n\n        scrollContainer.animate({\n          scrollTop: scrollContainer.scrollTop() + topPos\n        }, 300);\n        return true;\n      }\n    });\n  }; // build info content\n\n\n  var buildInfoContent = function buildInfoContent(place) {\n    var infoContent = "<div class=\\"infoWindow\\">";\n    infoContent += "<div class=\\"title\\">";\n    infoContent += "<img src=\\"".concat(place.icon, "\\" alt=\\"").concat(place.name, "\\" />");\n    infoContent += "<h6>".concat(place.name, "</h6>");\n    infoContent += \'</div>\';\n    infoContent += "<table>";\n    infoContent += "<tr><th>Address</th><td>".concat(place.vicinity, "</td></tr>");\n\n    if (place.international_phone_number) {\n      var phone = place.international_phone_number;\n      infoContent += "<tr><th>Phone</th><td><a href=\\"tel:".concat(phone, "\\">").concat(phone, "</a></td></tr>");\n    }\n\n    if (place.rating) {\n      infoContent += "<tr><th>Rating</th><td>".concat(placeRating(place.rating), "</td></tr>");\n    }\n\n    if (place.website) {\n      var website = hostnameRegexp.exec(place.website);\n\n      if (website === null) {\n        website = \'http://\' + place.website + \'/\';\n      }\n\n      infoContent += "<tr><th></th><td><a href=\\"".concat(website, "\\" target=\\"_blank\\">Visit website</a></td></tr>");\n    }\n\n    infoContent += "</table>";\n    infoContent += \'</div>\';\n    return infoContent;\n  }; // close the other info windows\n\n\n  var closeInfoWindow = function closeInfoWindow() {\n    if (!infos.length) return false;\n    infos[0].set(\'marker\', null);\n    infos[0].close();\n    infos.length = 0;\n  }; // clear map from markers\n\n\n  var clearMarkers = function clearMarkers() {\n    for (var i = 0; i < markers.length; i++) {\n      if (markers[i]) {\n        markers[i].setMap(null);\n      }\n    }\n\n    markers = [];\n  }; // clear the navigation\n\n\n  var clearResults = function clearResults() {\n    $(\'#resultsNav\').html(\'\');\n  };\n\n  var dropMarker = function dropMarker(key) {\n    return function () {\n      markers[key].setMap(map);\n    };\n  }; // load the picture by using UNPLASH API\n\n\n  var loadBgPicture = function loadBgPicture() {\n    // defined destinations\n    var destinations = [\'Bangkok\', \'London\', \'Paris\', \'Dubai\', \'Berlin\', \'Singapore\', \'New York\', \'Kuala Lumpur\', \'Tokyo\', \'Istanbul\', \'Miami\', \'Budapest\', \'Alicante\', \'Valletta\', \'Seoul\', \'Antalya\', \'Phuket\', \'Hong Kong\', \'Milan\', \'Mallorca\', \'Barcelona\', \'Dublin\', \'Warsaw\', \'Prague\', \'Moscow\', \'Dubrovnik\', \'Lisbon\', \'Rome\', \'Buenos Aires\', \'Rio de Janeiro\', \'Honolulu\', \'Las Vegas\', \'Pattaya\', \'Osaka\', \'Bali\'];\n    var placeKey = getRandomArray(destinations);\n    var choosenPlace = {\n      encoded: encodeURI(destinations[placeKey]).toLowerCase(),\n      title: destinations[placeKey]\n    }; // const apiKey = \'Your Api Key\';\n\n    var apiKey = \'0bc262d97de25b0b73334d9fb249196d2dc8a5d8053b762276866b0bb0a7641e\';\n    var apiUrl = "https://api.unsplash.com/search/photos/?client_id=".concat(apiKey, "&orientation=landscape");\n    apiUrl += "&query=".concat(choosenPlace.encoded);\n    $.ajax({\n      type: \'GET\',\n      url: apiUrl,\n      async: true,\n      success: function success(response) {\n        var place = response.results[getRandomArray(response.results)];\n        var infoContent = "<div class=\\"photoDescription\\">";\n        infoContent += "<h2>".concat(choosenPlace.title, "</h2>");\n        infoContent += place.description ? "<p>".concat(place.description, "</p>") : \'\';\n        infoContent += \'</div>\';\n        var body = $(\'body\');\n        body.append(infoContent);\n        var img = "<img src=\\"".concat(place.urls.full, "\\" alt=\\"").concat(place.alt_description, "\\" class=\\"bgImg\\">");\n        $(img).one(\'load\', function () {\n          body.prepend(img);\n          body.removeClass(\'loading\');\n        });\n      }\n    });\n  };\n\n  var getRandomArray = function getRandomArray(array) {\n    return Math.floor(Math.random() * Math.floor(array.length));\n  };\n\n  loadBgPicture(); // fire the app\n\n  initMap();\n}).catch(function (error) {\n  console.error(error);\n  $(\'main.searchApp\').append(\'<div class="error-message">There was a problem with load google maps. Error information you find in console</div>\');\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(27)))\n\n//# sourceURL=webpack:///./src/scripts/index.js?')},55:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/styles/index.scss?")}});